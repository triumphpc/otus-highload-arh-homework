services:
  app:
    build:
      context: ..
      dockerfile: docker/app/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app-network
    labels:
      - "com.example.app=social"
    expose:
      - "8080"
    healthcheck:
      test: [ "CMD", "wget", "-q", "-O", "-", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:14
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
#      - ./pg/postgresql.conf:/etc/postgresql/postgresql.conf
#    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    labels:
      - "com.example.db=postgres"

  db-seeder:
    profiles:
      - seed
    build:
      context: .
      dockerfile: pg/Dockerfile.seeder
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app-network
    restart: on-failure

  # Экспортер метрик PostgreSQL для Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      - postgres
    ports:
      - "9187:9187"
    networks:
      - app-network

  # Node exporter для метрик сервера (CPU, память и т.д.)
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app-network

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - postgres-exporter
      - node-exporter
    networks:
      - app-network

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECURITY_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    depends_on:
      - prometheus
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  pg_data:
  grafana_data:

networks:
  app-network:
    driver: bridge